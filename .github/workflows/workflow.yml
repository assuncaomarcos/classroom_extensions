name: Build

on: [push]

env:
  CIBW_BEFORE_BUILD: pip install -r requirements.txt

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Start containers
        run: docker-compose -f "docker-compose.yml" up -d --build

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install MariaDB client
        run: apt install libmariadb3 mariadb-client -y

      - name: Install MongoDB shell
        run: |
              sudo apt update
              wget -qO- https://www.mongodb.org/static/pgp/server-6.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-6.0.asc
              sudo apt-get install gnupg
              echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
              sudo apt update
              sudo apt install -y mongodb-mongosh

      - name: Run tests
        run: python3 -m unittest tests/run_tests.py

      - name: Stop containers
        run: docker-compose -f "docker-compose.yml" down

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Used to host cibuildwheel
      - uses: actions/setup-python@v2

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.1

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Build sdist
      run: pipx run --system-site-packages build --sdist

    - uses: actions/upload-artifact@v3
      with:
        path: dist/*.tar.gz

  upload_pypi:
    needs: [test, build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}